all_notify:
  sequence:
    - service: notify.kodi
      data_template:
        message: '{{ msg }}'
        data:
          icon: 'info'
    - service: script.mail_notify
      data_template:
        m: '{{ msg }}'
    - condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.kodi_screen_saver
          state: 'on'
        - condition: state
          entity_id: media_player.kodi
          state: 'idle'
    - service: persistent_notification.create
      data_template:
        message: '{{ msg }}'

mail_notify:
  sequence:
    - condition: template
      value_template: >-
        {{states.device_tracker.m4b30x.state != 'home'}}
    - service: notify.mailbg
      data_template:
        message: '{{ m }}'
        title: 'hass'

hyperion_clear_rgb:
  sequence:
    - service: shell_command.hyperion_cmd
      data_template:
        value: >-
          '{"command": "clear", "priority": {{ states.input_number.slider_rgb_priority.state | int }}}'

# Workaround celear twice to diasble effects
hyperion_clear_effects_if_none:
  sequence:
    - condition: template
      value_template: '{{is_state("input_select.select_effect", "None")}}'
    - service: shell_command.hyperion_cmd
      data_template:
        value: >-
          '{"command": "clear", "priority": {{ states.input_number.slider_effect_priority.state | int }}}'

hyperion_startup:
  sequence:
    - condition: or
      conditions:
        - condition: state
          entity_id: media_player.kodi
          state: 'idle'
    - service: input_select.select_option
      data:
        entity_id: input_select.select_effect
        option: Color traces
    - delay: '00:00:30'
    - service: input_select.select_option
      data:
        entity_id: input_select.select_effect
        option: None

tv_hdmi1:
  sequence:
    - service: shell_command.tv_hdmi1

tv_hdmi1_audio:
  sequence:
    - service: shell_command.tv_hdmi1_audio

sound_bar_up:
  sequence:
    - service: shell_command.sound_bar_up

sound_bar_down:
  sequence:
    - service: shell_command.sound_bar_down

sound_bar_mute:
  sequence:
    - service: shell_command.sound_bar_mute

sound_bar_off:
  sequence:
    - service: shell_command.sound_bar_off

sound_bar_on:
  sequence:
    - service: shell_command.sound_bar_on

tomato_smb_restart:
  sequence:
    - service: shell_command.tomato_smb_restart

local_reboot:
  sequence:
    - service: shell_command.local_reboot
      data_template:
        value: '{{"now"}}'

tomato_reboot:
  sequence:
     - service: shell_command.tomato_reboot

minix_reboot:
  sequence:
    - service: shell_command.minix_reboot
      data_template:
        value: '{{"+0"}}'

ports_open:
  sequence:
    - service: shell_command.port_open

reboot_all:
  sequence:
    - service: shell_command.minix_reboot
      data_template:
        value: '{{"+3"}}'
    - service: shell_command.local_reboot
      data_template:
        value: '{{"+4"}}'
    - service: script.tomato_reboot

hass_update:
  sequence:
     - service: shell_command.ha_update
     - service: homeassistant.check_config
     - service: homeassistant.restart

kodi_turn_off:
  sequence:
    - condition: template
      value_template: '{{is_state("binary_sensor.kodi_screen_saver", "off")}}'
    - service: media_player.media_stop
      entity_id: media_player.kodi
    - delay: '00:00:03'
    - service: shell_command.kodi_screensaver

kodi_turn_on:
  sequence:
    - condition: template
      value_template: '{{is_state("binary_sensor.kodi_screen_saver", "on")}}'
    - service: shell_command.kodi_wakeup

sun_above:
  sequence:
    - condition: template
      value_template: '{{is_state("sun.sun", "above_horizon")}}'
    - service: automation.trigger
      entity_id: automation.sun_rise

sun_below:
  sequence:
    - condition: template
      value_template: '{{is_state("sun.sun", "below_horizon")}}'
    - service: automation.trigger
      entity_id: automation.sun_set

hyperion_cmd_x:
  sequence:
    - service: shell_command.hyperion_cmd
      data_template:
        value: >-
          {%- if is_state("input_select.select_effect", "None") -%}
            '{"command": "clear", "priority": {{ states.input_number.slider_effect_priority.state | int }}}'
          {%- else -%}
            '{
                "command": "effect",
                "priority": {{ states.input_number.slider_effect_priority.state | int }},
                "duration": {{ states.input_number.slider_effect_time.state | int * 60000 }},
                "effect": { "name" : "{{ states.input_select.select_effect.state }}"}
              }'
          {%- endif %}
    - service: script.hyperion_clear_effects_if_none
    - condition: template
      value_template: '{{is_state("input_select.select_effect", "None") == False}}'
    - service: timer.start
      entity_id: timer.hyperion_effect_timer
      data_template:
        duration: '{{states.input_number.slider_effect_time.state|int * 60}}'

set_settings_video:
  sequence:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.gamma_r
        value: '{{states.input_number.video_gamma.state}}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.gamma_g
        value: '{{states.input_number.video_gamma.state}}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.gamma_b
        value: '{{states.input_number.video_gamma.state}}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.saturation
        value: '{{states.input_number.video_saturation.state}}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.brightness
        value: '{{states.input_number.video_brightness.state}}'

set_settings_light:
  sequence:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.gamma_r
        value: '{{states.input_number.light_gamma.state}}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.gamma_g
        value: '{{states.input_number.light_gamma.state}}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.gamma_b
        value: '{{states.input_number.light_gamma.state}}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.saturation
        value: '{{states.input_number.light_saturation.state}}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.brightness
        value: '{{states.input_number.light_brightness.state}}'

set_settings_effect:
  sequence:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.gamma_r
        value: '{{states.input_number.effect_gamma.state}}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.gamma_g
        value: '{{states.input_number.effect_gamma.state}}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.gamma_b
        value: '{{states.input_number.effect_gamma.state}}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.saturation
        value: '{{states.input_number.effect_saturation.state}}'
    - service: input_number.set_value
      data_template:
        entity_id: input_number.brightness
        value: '{{states.input_number.effect_brightness.state}}'

radio_on:
  sequence:
    - condition: and
      conditions:
        - condition: state
          entity_id: media_player.htmt500501_b34d6a
          state: 'off'
        - condition: or
          conditions:
          - condition: time
            after: '18:30:00'
            before: '00:05:00'
            weekday:
              - mon
              - tue
              - wed
              - thu
              - fri
          - condition: time
            after: '10:30:00'
            before: '00:35:00'
            weekday:
              - sat
              - sun
    - service: media_player.turn_on
      entity_id: media_player.htmt500501_b34d6a
    - wait_template: "{{states.media_player.htmt500501_b34d6a.state == 'playing'}}"
      timeout: '00:00:15'
    - service: media_player.volume_set
      data:
        entity_id: media_player.htmt500501_b34d6a
        volume_level: 0.16
    - service: input_select.select_option
      data:
        entity_id: input_select.select_effect
        option: trails

sound_bar_do_sleep_if:
  sequence:
    - condition: template
      value_template: >-
        {%- if is_state("device_tracker.n0ll", "home") or
        is_state("input_boolean.enable_sleep", "off") -%}
          True
        {%- else -%}
          False
        {%- endif -%}
    - service: timer.pause
      entity_id: timer.sound_bar

start_up_sound_bar:
  sequence:
    - condition: state
      entity_id: media_player.htmt500501_b34d6a
      state: 'playing'
    - service: timer.start
      entity_id: timer.sound_bar
    - condition: state
      entity_id: device_tracker.n0ll
      state: 'home'
    - service: timer.pause
      entity_id: timer.sound_bar

start_up_bedroom_speaker:
  sequence:
    - condition: state
      entity_id: media_player.bedroom_speaker
      state: 'playing'
    - service: timer.start
      entity_id: timer.bed_music

start_up_bed_led:
  sequence:
    - condition: state
      entity_id: light.bed_led
      state: 'on'
    - service: timer.start
      entity_id: timer.bed_light_timer

start_up:
  sequence:
    - service: shell_command.kodi_wakeup
    - delay: '00:00:01'
    - service: shell_command.kodi_screensaver
    - service: script.start_up_sound_bar
    - service: script.start_up_bedroom_speaker
    - service: script.start_up_bed_led

tv_on:
  sequence:
    #- service: logbook.log
      #data_template:
        #name: 'tv on time diff'
        #message: '{{as_timestamp(now()) - as_timestamp(states.script.start_up.attributes.last_triggered) }}'
    - condition: template
      value_template: >-
        {%- if (as_timestamp(now()) - as_timestamp(states.script.start_up.attributes.last_triggered)) > 9 -%}
          True
        {%- else -%}
          False
        {%- endif -%}
    #- service: script.tv_hdmi1_audio
    - service: switch.turn_on
      entity_id: switch.tv_cec
    - delay: '00:00:03'
    - service: script.sound_bar_on
    - delay: '00:00:{{states.input_number.cec_cmd_delay.state|int}}'
    - service: script.tv_hdmi1_audio
    - service: script.tv_hdmi1
    - delay: '00:00:{{states.input_number.cec_cmd_delay.state|int}}'
    - service: script.tv_hdmi1_audio
    - service: script.tv_hdmi1
    - delay: '00:00:{{states.input_number.cec_cmd_delay.state|int}}'
    - service: script.tv_hdmi1_audio
    - service: script.tv_hdmi1

tv_off:
  sequence:
    - service: switch.turn_off
      entity_id: switch.tv_cec
    - service: script.radio_on
    - service: input_select.select_option
      data:
        entity_id: input_select.select_effect
        option: trails_color

root_not_home:
  sequence:
    - service: media_player.turn_off
      entity_id:
        - media_player.htmt500501_b34d6a
        - media_player.bedroom_speaker
    - service: script.kodi_turn_off

root_home:
  sequence:
    - service: timer.start
      entity_id: timer.just_home
      data_template:
        duration: '{{states.input_number.just_home_timer.state|int * 60}}'
    - service: script.radio_on
    - service: input_boolean.turn_off
      entity_id: input_boolean.home_motion

root_from_work:
  sequence:
    - service: logbook.log
      data:
        name: track
        message: 'exit work'

n0ll_not_home:
  sequence:
    - service: timer.start
      entity_id: timer.sound_bar
      data:
        duration: '00:01:00'
    - service: script.hyperion_clear_rgb
    - service: input_select.select_option
      data:
        entity_id: input_select.select_effect
        option: Sparks Color

n0ll_home:
  sequence:
    - service: script.radio_on
    - service: automation.trigger
      entity_id: automation.send_rgb_hyperion
    - condition: state
      entity_id: media_player.htmt500501_b34d6a
      state: 'playing'
    - service: timer.pause
      entity_id: timer.sound_bar

heat_conrtol_home:
  sequence:
    - condition: template
      value_template: '{{d == "on"}}'
    - service: climate.set_operation_mode
      entity_id: climate.living
      data:
        operation_mode: manual
    - service: climate.set_temperature
      entity_id: climate.living
      data_template:
        temperature: '{{states.input_number.temp_home.state|int}}'
    - service: climate.set_operation_mode
      data:
        entity_id: climate.living
        operation_mode: boost

heat_conrtol_away:
  sequence:
    - condition: template
      value_template: '{{d == "off"}}'
    - service: climate.set_operation_mode
      entity_id: climate.living
      data:
        operation_mode: auto

heat_conrtol:
  sequence:
    - service: script.heat_conrtol_home
      data_template:
        d: '{{ dat }}'
    - service: script.heat_conrtol_away
      data_template:
        d: '{{ dat }}'

home_near:
  sequence:
    - service: climate.set_operation_mode
      entity_id: climate.living
      data:
        operation_mode: auto
    - service: notify.mailbg
      data:
        message: Auto Heating
        title: 'hass'
    - service: automation.turn_off
      entity_id: automation.home_near
    - service: automation.turn_on
      entity_id: automation.home_away

home_away:
  sequence:
    - service: climate.set_operation_mode
      entity_id: climate.living
      data:
        operation_mode: manual
    - service: climate.set_temperature
      entity_id: climate.living
      data_template:
        temperature: '{{states.input_number.temp_away.state|int}}'
    - service: notify.mailbg
      data:
        message: Eco Heating
        title: 'hass'
    - service: automation.turn_off
      entity_id: automation.home_away
    - service: automation.turn_on
      entity_id: automation.home_near

android_post_alarm:
  sequence:
    - condition: state
      entity_id: device_tracker.m4b30x
      state: 'home'
    - service: logbook.log
      data:
        name: 'ha_alarm'
        message: 'run'
    - service: input_select.select_option
      data:
        entity_id: input_select.select_radio_bed
        option: Nova Bg
    - service: automation.trigger
      entity_id: automation.bed_music_on
    - wait_template: "{{states.media_player.bedroom_speaker.state == 'playing'}}"
      timeout: '00:00:15'
    - service: media_player.volume_set
      data:
        entity_id: media_player.bedroom_speaker
        volume_level: 0.15

bed_auto_light:
  sequence:
    - condition: and
      conditions:
        - condition: state
          entity_id: switch.hyperion_enable
          state: 'on'
        - condition: template
          value_template: >-
            {%- if (states.automation.bed_auto_off.attributes.last_triggered != None) -%}
              {{
                (as_timestamp(now()) -
                as_timestamp(states.automation.bed_auto_off.attributes.last_triggered)) >
                (states.input_number.bed_light_duration.state | float * 60)
              }}
            {%- else -%}
              True
            {%- endif -%}
    - service: logbook.log
      data:
        name: 'Bed light'
        message: 'On'
    - service: light.turn_on
      entity_id: light.bed_led
      data_template:
        rgb_color: ['{{(range(50, 100)|random)}}','{{(range(200, 250)|random)}}','{{(range(100, 150)|random)}}']
        transition: '{{10}}'
    - service: timer.start
      entity_id: timer.bed_light_timer
      data_template:
        duration: '00:03:00'

living_auto_light:
  sequence:
    - condition: and
      conditions:
        - condition: state
          entity_id: switch.hyperion_enable
          state: 'on'
        - condition: state
          entity_id: device_tracker.n0ll
          state: 'not_home'
        - condition: state
          entity_id: binary_sensor.kodi_screen_saver
          state: 'on'
    - service: logbook.log
      data:
        name: 'Living light'
        message: 'On'
    - service: automation.trigger
      entity_id: automation.light_keep_alive
    - service: timer.start
      entity_id: timer.hyperion_rgb_timer
      data_template:
        duration: '{{states.input_number.slider_rgb_time.state|int * 60}}'

hall_auto_light:
  sequence:
    - service: logbook.log
      data:
        name: 'Hall light'
        message: 'On'
    - service: script.living_auto_light
    - service: script.bed_auto_light
