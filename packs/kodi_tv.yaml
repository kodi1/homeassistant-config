homeassistant:
  customize:
    switch.tv_cec:
      icon: mdi:video-input-hdmi
    switch.hyperion_enable:
      icon: mdi:spotlight-beam
    script.tv_hdmi1:
      icon: mdi:television
    script.tv_hdmi1_audio:
      icon: mdi:surround-sound
    binary_sensor.bravia:
      icon: mdi:television

group:
  media_control:
    view: false
    control: hidden
    icon: mdi:television
    name: media_control
    entities:
      - script.tv_hdmi1
      - script.tv_hdmi1_audio
      - script.sound_bar_on
      - script.sound_bar_off
      - switch.tv_cec
      - switch.hyperion_enable
      - input_number.cec_cmd_delay

automation:
  - alias: kodi sleep timer
    trigger:
      - platform: event
        event_type: kodi_sleep_timer
    condition:
      - condition: state
        entity_id: switch.tv_cec
        state: 'on'
    action:
      - service: switch.turn_off
        entity_id: switch.tv_cec

  - alias: tv off
    trigger:
      - platform: state
        entity_id: binary_sensor.kodi_screen_saver
        to: 'on'
        for:
          seconds: 60
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: media_player.kodi
          state: idle
        - condition: state
          entity_id: switch.tv_cec
          state: 'on'
    action:
      - service: script.tv_off

  - alias: tv on
    trigger:
      - platform: state
        entity_id: binary_sensor.kodi_screen_saver
        to: 'off'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: media_player.kodi
          state: idle
        - condition: state
          entity_id: switch.tv_cec
          state: 'off'
    action:
      - service: script.tv_on

  - alias: kodi paly
    trigger:
      - platform: state
        entity_id: media_player.kodi
        to: playing
    action:
      - service: input_select.select_option
        data:
          entity_id: input_select.select_effect
          option: None
      - service: script.hyperion_clear_rgb
      - service: script.set_settings_video
      #- service: shell_command.tv_volup
      #- delay: '00:00:03'
      #- service: shell_command.tv_voldown

  - alias: kodi pause
    trigger:
      - platform: state
        entity_id: media_player.kodi
        to: idle
      - platform: state
        entity_id: media_player.kodi
        to: paused
    action:
      - service: input_select.select_option
        data:
          entity_id: input_select.select_effect
          option: trails

media_player:
  - platform: kodi
    host: !secret kodi_host
    port: !secret kodi_port
    username: !secret kodi_user
    password: !secret kodi_pass
    turn_off_action:
      service: script.kodi_turn_off
    turn_on_action:
      service: script.kodi_turn_on

script:
  tv_hdmi1:
    sequence:
      - service: shell_command.tv_hdmi1

  tv_hdmi1_audio:
    sequence:
      - service: shell_command.tv_hdmi1_audio

  kodi_turn_off:
    sequence:
      - condition: state
        entity_id: switch.tv_cec
        state: 'on'
      - service: media_player.media_stop
        entity_id: media_player.kodi
      - delay: '00:00:03'
      - service: shell_command.kodi_screensaver
      - service: automation.trigger
        entity_id: automation.tv_off

  kodi_turn_on:
    sequence:
      - condition: template
        value_template: '{{is_state("binary_sensor.kodi_screen_saver", "on")}}'
      - service: shell_command.kodi_wakeup

  start_up_delay_av_off:
    sequence:
      - delay: '00:00:05'
      - service: switch.turn_off
        entity_id: switch.tv_cec
      - condition: template
        value_template: '{{ is_state("media_player.htmt500501_b34d6a", "playing") == False }}'
      - service: script.sound_bar_off

  tv_on:
    sequence:
      #- service: logbook.log
        #data_template:
          #name: 'tv on time diff'
          #message: '{{as_timestamp(now()) - as_timestamp(states.script.start_up.attributes.last_triggered) }}'
      - condition: template
        value_template: >-
          {%- if (states.script.start_up.attributes.last_triggered != None) -%}
            {{
              (as_timestamp(now()) -
              as_timestamp(states.script.start_up.attributes.last_triggered)) > 9
            }}
          {%- else -%}
            True
          {%- endif -%}
      - service: script.sound_stop_if_play
      - service: switch.turn_on
        entity_id: switch.tv_cec
      - service: script.sound_bar_on
      - service: script.tv_hdmi1
      - delay: '00:00:{{states.input_number.cec_cmd_delay.state|int}}'
      - service: script.tv_hdmi1
      - service: script.tv_hdmi1_audio
      - delay: '00:00:{{states.input_number.cec_cmd_delay.state|int}}'
      - service: script.tv_hdmi1
      - service: script.tv_hdmi1_audio

  tv_off:
    sequence:
      - service: switch.turn_off
        entity_id: switch.tv_cec
      - service: script.radio_on
      - service: input_select.select_option
        data:
          entity_id: input_select.select_effect
          option: trails_color

shell_command:
  kodi_screensaver: "/home/hass/.homeassistant/cmds/kodi_screensaver"
  kodi_wakeup: "/home/hass/.homeassistant/cmds/kodi_wakeup"
  minix_reboot: "/home/hass/.homeassistant/cmds/minix_reboot {{ value }}"
  tv_hdmi1: "/home/hass/.homeassistant/cmds/cec_cmd 'as'"
  tv_hdmi1_audio: "/home/hass/.homeassistant/cmds/cec_cmd 'tx 15:70:10:00'"

switch:
  - platform: command_line
    switches:
      tv_cec:
        command_on: "/home/hass/.homeassistant/cmds/cec_cmd 'tx 10:04'"
        command_off: "/home/hass/.homeassistant/cmds/cec_cmd 'tx 10:36'"

input_number:
  cec_cmd_delay:
    name: 'cec delay'
    unit_of_measurement: 'sec'
    min: 1
    max: 10
    step: 1
    icon: mdi:sync
